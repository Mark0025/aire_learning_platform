{
  "moduleId": "js-basics",
  "moduleName": "JavaScript Fundamentals",
  "description": "Learn the basics of modern JavaScript programming including variables, data types, functions, and control structures.",
  "category": "Programming",
  "difficulty": "beginner",
  "tags": ["javascript", "programming", "web development"],
  "createdAt": "2023-05-15T12:00:00Z",
  "updatedAt": "2023-05-15T12:00:00Z",
  "questions": [
    {
      "id": 1,
      "question": "Which keyword is used to declare a variable in modern JavaScript that can be reassigned?",
      "options": ["const", "var", "let", "function"],
      "correctAnswer": 2,
      "explanation": "The 'let' keyword declares a block-scoped variable that can be reassigned. 'const' variables cannot be reassigned, and 'var' is the older way to declare variables with function scope."
    },
    {
      "id": 2,
      "question": "Which of the following is NOT a primitive data type in JavaScript?",
      "options": ["string", "boolean", "array", "number"],
      "correctAnswer": 2,
      "explanation": "Array is not a primitive data type; it's a complex data type (object). The primitive data types in JavaScript are: string, number, boolean, null, undefined, symbol, and bigint."
    },
    {
      "id": 3,
      "question": "What is the output of: console.log(typeof []);",
      "options": ["array", "object", "undefined", "null"],
      "correctAnswer": 1,
      "explanation": "In JavaScript, arrays are actually objects, so typeof [] returns 'object'. This is one of JavaScript's quirks."
    },
    {
      "id": 4,
      "question": "How do you declare an arrow function that takes two parameters?",
      "options": [
        "function(a, b) => { return a + b; }",
        "(a, b) => { return a + b; }",
        "a, b => a + b",
        "=> (a, b) { return a + b; }"
      ],
      "correctAnswer": 1,
      "explanation": "Arrow functions are declared using the syntax: (parameters) => { function body }. For a single expression that's returned, you can omit the braces and 'return' keyword: (a, b) => a + b"
    },
    {
      "id": 5,
      "question": "What is the correct way to check if two variables have the same value and type?",
      "options": ["==", "===", "equals()", "is()"],
      "correctAnswer": 1,
      "explanation": "The strict equality operator (===) checks both value and type. The loose equality operator (==) only checks value and performs type conversion."
    },
    {
      "id": 6,
      "question": "What will console.log(2 + '2') output?",
      "options": ["4", "22", "NaN", "TypeError"],
      "correctAnswer": 1,
      "explanation": "When adding a number and a string, JavaScript converts the number to a string and performs string concatenation, resulting in '22'."
    },
    {
      "id": 7,
      "question": "Which method is used to add elements to the end of an array?",
      "options": ["push()", "pop()", "shift()", "unshift()"],
      "correctAnswer": 0,
      "explanation": "The push() method adds elements to the end of an array. pop() removes from the end, shift() removes from the beginning, and unshift() adds to the beginning."
    },
    {
      "id": 8,
      "question": "What's the purpose of the 'async' keyword in a function declaration?",
      "options": [
        "Makes the function run faster",
        "Indicates the function returns a Promise",
        "Prevents the function from being called",
        "Makes the function run in a separate thread"
      ],
      "correctAnswer": 1,
      "explanation": "The 'async' keyword indicates that a function returns a Promise. It allows the use of 'await' inside the function to pause execution until a Promise resolves."
    },
    {
      "id": 9,
      "question": "Which method is used to execute code after a specified delay?",
      "options": ["setTimeout()", "setInterval()", "wait()", "delay()"],
      "correctAnswer": 0,
      "explanation": "setTimeout() executes code once after a specified delay. setInterval() executes code repeatedly at specified intervals."
    },
    {
      "id": 10,
      "question": "How do you convert a JSON string to a JavaScript object?",
      "options": ["JSON.stringify()", "JSON.parse()", "JSON.toObject()", "JSON.decode()"],
      "correctAnswer": 1,
      "explanation": "JSON.parse() converts a JSON string to a JavaScript object. JSON.stringify() does the opposite, converting an object to a JSON string."
    },
    {
      "id": 11,
      "question": "What will be the value of x? let x = 10; x += 5;",
      "options": ["10", "5", "15", "undefined"],
      "correctAnswer": 2,
      "explanation": "The += operator adds the right operand to the left operand and assigns the result to the left operand. So x += 5 is equivalent to x = x + 5, resulting in 15."
    },
    {
      "id": 12,
      "question": "Which statement is used to stop the execution of a loop?",
      "options": ["stop", "exit", "return", "break"],
      "correctAnswer": 3,
      "explanation": "The 'break' statement is used to exit a loop immediately. 'return' exits the entire function, and 'exit' and 'stop' are not valid JavaScript statements for this purpose."
    },
    {
      "id": 13,
      "question": "What is a closure in JavaScript?",
      "options": [
        "A way to close browser windows",
        "A function that has access to variables in its outer lexical environment",
        "A method to end program execution",
        "A security feature that prevents code injection"
      ],
      "correctAnswer": 1,
      "explanation": "A closure is a function that has access to variables from its outer (enclosing) scope, even after the outer function has returned."
    },
    {
      "id": 14,
      "question": "What is the output of: console.log(1 == '1')?",
      "options": ["true", "false", "undefined", "TypeError"],
      "correctAnswer": 0,
      "explanation": "The loose equality operator (==) performs type conversion. When comparing a number and a string, it converts the string to a number, so 1 == '1' evaluates to true."
    },
    {
      "id": 15,
      "question": "What is the purpose of the 'this' keyword in JavaScript?",
      "options": [
        "To reference the current file",
        "To reference the current function",
        "To reference the current object",
        "To reference a variable named 'this'"
      ],
      "correctAnswer": 2,
      "explanation": "The 'this' keyword refers to the object it belongs to or the object that's currently calling the method. Its value depends on how a function is called."
    }
  ],
  "flashcards": [
    {
      "id": 1,
      "front": "What are the primitive data types in JavaScript?",
      "back": "string, number, boolean, null, undefined, symbol, and bigint"
    },
    {
      "id": 2,
      "front": "What's the difference between let and const?",
      "back": "let declares variables that can be reassigned, while const declares variables that cannot be reassigned after initialization."
    },
    {
      "id": 3,
      "front": "What is an arrow function?",
      "back": "A shorthand way to write functions in JavaScript, introduced in ES6. Syntax: (params) => { statements }"
    },
    {
      "id": 4,
      "front": "What is the difference between == and ===?",
      "back": "== compares values after type conversion (loose equality), while === compares both values and types without conversion (strict equality)."
    },
    {
      "id": 5,
      "front": "What is a Promise in JavaScript?",
      "back": "An object representing the eventual completion or failure of an asynchronous operation, allowing you to handle the result when it becomes available."
    },
    {
      "id": 6,
      "front": "How do you handle errors in JavaScript?",
      "back": "Using try/catch blocks: try { // code that might throw an error } catch (error) { // handle the error }"
    },
    {
      "id": 7,
      "front": "What is the DOM?",
      "back": "The Document Object Model (DOM) is a programming interface for web documents. It represents the page as nodes and objects that can be manipulated with JavaScript."
    },
    {
      "id": 8,
      "front": "What is a JavaScript callback function?",
      "back": "A function passed as an argument to another function, to be executed later or after some event or condition occurs."
    },
    {
      "id": 9,
      "front": "What is JSON?",
      "back": "JavaScript Object Notation (JSON) is a lightweight data-interchange format. It's a text format that's easy for humans to read and write and easy for machines to parse and generate."
    },
    {
      "id": 10,
      "front": "What does the 'use strict' directive do?",
      "back": "It enables strict mode, which catches common coding mistakes and prevents some unsafe actions. It helps write cleaner code and prevents the use of undeclared variables."
    },
    {
      "id": 11,
      "front": "How do you add an element to the beginning of an array?",
      "back": "Using the unshift() method: array.unshift(element)"
    },
    {
      "id": 12,
      "front": "What is hoisting in JavaScript?",
      "back": "A behavior where variable and function declarations are moved to the top of their containing scope during compilation, allowing them to be used before they're actually declared in the code."
    }
  ]
} 